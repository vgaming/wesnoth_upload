#!/bin/bash -euET
set -o pipefail
{

err_exit() {
  >&2 printf '%s\n' "$*"
  exit 1
}

#### check arguments
if test "$#" != 1; then
  err_exit "[wesnoth_upload] ERROR. Invalid number of arguments. Usage:
  $0 --patch
  $0 --minor
  $0 --major
  $0 git-tag-name"
fi
tag="$1"


example_config_dir=$(dirname -- "$(realpath -- "$0")")
source "$example_config_dir"/config_example.sh

echo "[wesnoth_upload] Sourcing your local config in .build/config.sh..."
if ! source .build/config.sh; then
  err_exit "[wesnoth_upload] ERROR. Could not source .build/config.sh"
fi


echo '[wesnoth_upload] Preparing the "target" dir...'
data_dir=$(basename -- "$(realpath src)")
mkdir -p src/target
printf "%s" "$data_dir" > src/target/addon_dir
test -f src/target/version.txt || echo "0.0.1" > src/target/version.txt
echo '[wesnoth_upload] Target directory and version OK'


echo "[wesnoth_upload] Using luacheck to find possible problems in Lua code..."
readarray -td '' all_lua_files < <(find src/ -name '*.lua' -print0)
if test "${#all_lua_files[@]}" -ne 0 && test "${luacheck_ignore:-}" != "true"; then
  if ! command -v "$luacheck_binary" >/dev/null 2>&1; then
    err_exit "[wesnoth_upload] WARNING. $luacheck_binary binary not found." \
      "Could not check your lua files." \
      "You can disable luacheck by setting luacheck_ignore=true"
  elif ! test -f "$luacheckrc"; then
    err_exit "[wesnoth_upload] WARNING: $luacheckrc not found. " \
      "Could not check your lua files. " \
      "You can disable luacheck by setting luacheck_ignore=true"
  else
    ${luacheck_binary} "${all_lua_files[@]}" \
      --globals wesnoth wml filesystem mathx --std max \
      --config "$luacheckrc"
  fi
fi
echo "[wesnoth_upload] Luacheck OK"


echo "[wesnoth_upload] Checking Lua file headers..."
for lua_file in "${all_lua_files[@]}"; do
  expected_name=$(basename --suffix=.lua -- "$lua_file")
  expected="-- << $expected_name | $data_dir"
  actual=$(head -n 1 -- "$lua_file")
  if test "$actual" != "$expected"; then
    err_exit "Lua file $lua_file does not have a proper header (first line).
      Expected:
      $expected
      Actual:
      $actual
      Such a file header improves debugging in situations when something goes wrong."
  fi
done
echo "[wesnoth_upload] Lua file headers OK"


#### only upload clean git directory, no uncommitted changes
if ! test -z "$(git status --porcelain)" && test "${uncommitted_ignore:-}" != "true" ; then
  err_exit "[wesnoth_upload] ERROR. You have uncommitted changes." \
    "You can disable this check by setting uncommitted_ignore=true"
fi


#### only upload commits that you actually pushed anywhere
if test "${not_pushed_ignore:-}" != "true" &&
  ! test "$(git rev-parse HEAD)" = "$(git rev-parse '@{u}')"
then
  err_exit "[wesnoth_upload] ERROR. git push first!" \
    "You can disable this check by setting not_pushed_ignore=true"
fi


echo "[wesnoth_upload] Increasing version number according to semver..."
IFS=. read -r -a semver < <(git describe --abbrev=0 --tags 2>/dev/null || echo "0.0.0")
major=${semver[0]}
minor=${semver[1]:-0}
patch=${semver[2]:-0}
if test "--major" = "$tag" ; then
  tag="$((major+1)).0.0"
elif test "--minor" = "$tag"; then
  tag="$major.$((minor+1)).0"
elif test "--patch" = "$tag"; then
  tag="$major.$minor.$((patch+1))"
#else
#	err_exit "Unexpected tag name $tag. Please specify either --major, --minor or --patch"
fi
echo "[wesnoth_upload] The new version will be $tag"


echo "[wesnoth_upload] Creating a git tag with this version..."
git tag -m "release" "$tag"
trap 'git tag --delete "$tag"' ERR
echo "[wesnoth_upload] Git tag created (might be reverted in case of errors during upload)"


echo "[wesnoth_upload] Writing the versions in a separate file to allow using it in WML..."
git describe --tags | cut -d '-' -f -2 | tr -d '\n' | tee src/target/version.txt
cat src/target/version.txt | tr '.-' '__' > src/target/version_nodot.txt

#### if passphrase fuction doesn't exist in user config, define it
if test "$(type -t passphrase)" = "function"; then
  echo "[wesnoth_upload] WARN: using a custom user function for passphrase. In the future this might be removed."
else
  passphrase() {
    if ! test -s .build/.passphrase; then
      echo "$RANDOM$RANDOM$RANDOM$RANDOM" >> .build/.passphrase
    fi
    cat .build/.passphrase
  }
fi

description >/dev/null  # re-generate
passphrase >/dev/null  # re-generate
addon_ver=$(cat src/target/version.txt)


#### upload
for ver in "${upload_to_wesnoth_versions[@]}"; do
  echo "[wesnoth_upload] Uploading the addon to $ver..."
  wesnoth_addon_manager --port "$ver.x" \
   --pbl-key "version" "$addon_ver" \
    --pbl-key "description" "$(description)" \
    --pbl-key "passphrase" "$(passphrase)" \
    "${addon_manager_args[@]}" \
    --upload "$data_dir"
  echo "Upload OK"
done

rm ./packet.dump 2>/dev/null || true

echo "[wesnoth_upload] Success, add-on uploaded"

exit
}

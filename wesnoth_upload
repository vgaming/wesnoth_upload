#!/bin/bash -euET
set -o pipefail
{

err_exit() {
	>&2 printf '%s\n' "$*"
	exit 1
}

#### check arguments
if test "$#" != 1; then
	err_exit "ERROR. Invalid number of arguments. Usage:
	$0 --patch
	$0 --minor
	$0 --major
	$0 git-tag-name"
fi
tag="$1"


example_config_dir=$(dirname -- "$(realpath -- "$0")")
source "$example_config_dir"/config_example.sh

#### source user config
if ! source .build/config.sh; then
	err_exit "ERROR. Could not source .build/config.sh"
fi


#### use luacheck to find possible problems in Lua code
readarray -td '' all_lua_files < <(find src/ -name '*.lua' -print0)
if test "${#all_lua_files[@]}" -ne 0; then
	if test "${luacheck_ignore:-}" = "true"; then
		true
	elif ! command -v "$luacheck_binary" >/dev/null 2>&1; then
		err_exit "WARNING. $luacheck_binary binary not found." \
			"Could not check your lua files." \
			"You can disable luacheck by setting luacheck_ignore=true"
	elif ! test -f "$luacheckrc"; then
		err_exit "WARNING: $luacheckrc not found. " \
			"Could not check your lua files. " \
			"You can disable luacheck by setting luacheck_ignore=true"
	else
		${luacheck_binary} "${all_lua_files[@]}" \
			--globals wesnoth wml --std max \
			--config "$luacheckrc"
	fi
fi


#### only upload clean git directory, no uncommitted changes
if ! test -z "$(git status --porcelain)" && test "${uncommitted_ignore:-}" != "true" ; then
	err_exit "ERROR. You have uncommitted changes." \
		"You can disable this check by setting uncommitted_ignore=true"
fi


#### only upload commits that you actually pushed anywhere
if test "${not_pushed_ignore:-}" != "true" &&
	! test "$(git rev-parse HEAD)" = "$(git rev-parse '@{u}')"
then
	err_exit "ERROR. git push first!" \
		"You can disable this check by setting not_pushed_ignore=true"
fi


#### increase version according to semver
IFS=. read -r -a semver < <(git describe --abbrev=0 --tags 2>/dev/null || echo "0.0.0")
major=${semver[0]}
minor=${semver[1]:-0}
patch=${semver[2]:-0}
if test "--major" = "$tag" ; then
	tag="$((major+1)).0.0"
elif test "--minor" = "$tag"; then
	tag="$major.$((minor+1)).0"
elif test "--patch" = "$tag"; then
	tag="$major.$minor.$((patch+1))"
#else
#	err_exit "Unexpected tag name $tag. Please specify either --major, --minor or --patch"
fi

#### create a git tag for each upload
git tag -m "release" "$tag"
trap 'git tag --delete "$tag"' ERR


#### prepare "target" dir
data_dir=$(basename -- "$(realpath src)")
mkdir -p src/target
printf "%s" "$data_dir" > src/target/addon_dir


#### write the versions in separate file to allow using it in WML
git describe --tags | cut -d '-' -f -2 | tr -d '\n' | tee src/target/version.txt
cat src/target/version.txt | tr '.-' '__' > src/target/version_nodot.txt

#### if passphrase fuction doesn't exist in user config, define it
if test "$(type -t passphrase)" != "function"; then
  passphrase() {
    if ! test -f .build/.passphrase; then
      echo "$RANDOM$RANDOM$RANDOM$RANDOM" >> .build/.passphrase
    fi
    cat .build/.passphrase
  }
else
  echo "WARN: using a custom user function for passphrase. In the future this might be removed."
fi

description >/dev/null  # re-generate
passphrase >/dev/null  # re-generate
addon_ver=$(cat src/target/version.txt)

#### upload
for ver in "${upload_to_wesnoth_versions[@]}"; do
	wesnoth_addon_manager --port "$ver.x" \
		--pbl-key "version" "$addon_ver" \
		--pbl-key "description" "$(description)" \
		--pbl-key "passphrase" "$(passphrase)" \
		"${addon_manager_args[@]}" \
		--upload "$data_dir"
done

rm ./packet.dump 2>/dev/null || true

exit
}
